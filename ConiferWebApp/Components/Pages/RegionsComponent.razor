@page "/RegionsComponent"

@using ConiferWebApp.Services
@using ModelsProject;
@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.Components;
@using Microsoft.AspNetCore.Components.Web;
@using System.Text.Json
@using System.Text.RegularExpressions
@using Newtonsoft.Json


@rendermode InteractiveServer




@inject NavigationManager NavigationManager

@attribute [StreamRendering]



<h3>Select your region</h3>
@if (this.RegionsAndStateAbbreviations != null && this.RegionsAndStateAbbreviations.Count > 0)
{
    <div class="row">
        <div class="col-md-6">
            <select class="form-select" onchange="@RegionClicked">
                <option value="Select a region">
                    Select a region
                </option>
                @foreach (var region in this.RegionsAndStateAbbreviations)
                {
                    <option id="@region.RegionName" value="@region.Abbrev"  >
                        @region.RegionName (@region.Abbrev)
                    </option>
                }
            </select>
        </div>

    </div>
    <p></p>
    <div class="row">
        <div class="col-md-6">
            <button type="button" class="w-100 btn btn-lg btn-danger" @onclick="HandleAlerts">
                Alerts
            </button>
        </div>
    </div>
}
@code {

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;


    private List<MyRegion> Regions { get; set; } = new();


    private List<MyState> States { get; set; } = new();


    [Inject]
    public IRegion? GetRegionsService { get; set; }

    [Inject]
    public IState? GetStatesService { get; set; }


    [Inject]
    public IZone? GetZonesService { get; set; }

    private string statesSelected { get; set; } = "";



    List<StateAbbreviationLinq> RegionsAndStateAbbreviations { get; set; } = new();


    protected override async Task OnInitializedAsync()
    {
        // read region file
        this.Regions =  this.GetRegionsService.GetRegions().Result;
        this.States = this.GetStatesService.GetStates().Result;

        var stateabbr =
           (from reg in this.Regions
            join sta in this.States on reg.Id equals sta.RegionId into regstates
            group regstates by reg.Name into regionGrouped
            select regionGrouped).ToList();

        foreach (var key in stateabbr)
        {
            StateAbbreviationLinq gotRegionsAndStates = new();

            gotRegionsAndStates.RegionName = key.Key;
            var abbreviations = key.FirstOrDefault();
            List<string> statesabbrevs = new List<string>();

            foreach (var abbrev in abbreviations)
            {
                statesabbrevs.Add(abbrev.Abbreviation);
            }

            gotRegionsAndStates.Abbrev = string.Join(", ", statesabbrevs);
            this.RegionsAndStateAbbreviations.Add(gotRegionsAndStates);

        }



        await base.OnInitializedAsync();
    }

    private  void RegionClicked( ChangeEventArgs args )
    {
        this.statesSelected = "";

        this.statesSelected = args.Value.ToString();


    }
    private async void  HandleAlerts(MouseEventArgs e)
    {
        if (this.statesSelected != null && this.statesSelected != "" && this.statesSelected != "Select a region")
        {
            // A call to the server was already made
            
            // no need to call this because it has already been called
            // await this.GetZonesService.GetZones();

            NavigationManager.NavigateTo($"AlertsComponent?StatesPassed={this.statesSelected}");
        }
    }

    private sealed class StateAbbreviationLinq
    {
        public string RegionName { get; set; }
        public string Abbrev { get; set; }
    }
}
