@page "/RegionsComponent"

@using ConiferWebApp.Services
@using ModelsProject;
@using System.ComponentModel.DataAnnotations
@* @using BlazorApp1.Models.Clients *@
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.Components;
@using Microsoft.AspNetCore.Components.Web;
@using System.Text.Json
@using System.Text.RegularExpressions
@using Newtonsoft.Json
@* @using Syncfusion.Blazor.DropDowns *@

@* @using BlazorApp1.Components.Account
@using BlazorApp1.Components.Account.Pages
@using BlazorApp1.Components.Pages
 *@
@* @using BlazorApp1.Data
@using BlazorApp1.Services
 *@
 @rendermode InteractiveServer



@* @inject SignInManager<ApplicationUser> SignInManager *@
@* @inject ILogger<Login> Logger *@
@inject NavigationManager NavigationManager

@attribute [StreamRendering]



<h3>Select your region</h3>
@if (this.RegionsAndStateAbbreviations != null && this.RegionsAndStateAbbreviations.Count > 0)
{
    <div class="row">
        <div class="col-md-4">
            <select class="form-control" onchange="@RegionClicked">
                <option value="">
                    Select a region
                </option>
                @foreach (var region in this.RegionsAndStateAbbreviations)
                {
                    <option id="@region.RegionName">
                        @region.RegionName (@region.Abbrev)
                    </option>
                }
            </select>
        </div>

    </div>
    <p></p>
    <div class="row">
        <div class="col-md-4">
            <button type="button" class="w-100 btn btn-lg btn-danger" @onclick="HandleAlerts">
                Alerts
            </button>
        </div>
    </div>
}
@code {

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;


    private List<MyRegion> Regions { get; set; } = new();


    private List<MyState> States { get; set; } = new();


    [Inject]
    public IRegion? GetRegionsService { get; set; }

    [Inject]
    public IState? GetStatesService { get; set; }


    [Inject]
    public IZone? GetZonesService { get; set; }

    // [Inject]
    // public IZone? GetZonesService { get; set; }


    List<StateAbbreviationLinq> RegionsAndStateAbbreviations { get; set; } = new();


    protected override async Task OnInitializedAsync()
    {
        // read region file
        this.Regions =  this.GetRegionsService.GetRegions().Result;// this.FileOpenRegions();
        this.States = this.GetStatesService.GetStates().Result;// this.FileOpenStates();

        var stateabbr =
           (from reg in this.Regions
            join sta in this.States on reg.Id equals sta.RegionId into regstates
            group regstates by reg.Name into regionGrouped
            select regionGrouped).ToList();

        foreach (var key in stateabbr)
        {
            StateAbbreviationLinq gotRegionsAndStates = new();

            gotRegionsAndStates.RegionName = key.Key;
            var abbreviations = key.FirstOrDefault();
            List<string> statesabbrevs = new List<string>();

            foreach (var abbrev in abbreviations)
            {
                statesabbrevs.Add(abbrev.Abbreviation);
            }

            gotRegionsAndStates.Abbrev = string.Join(", ", statesabbrevs);
            this.RegionsAndStateAbbreviations.Add(gotRegionsAndStates);

        }



        await base.OnInitializedAsync();
    }

    // private List<MyRegion> FileOpenRegions()
    // {
    //     var json = File.ReadAllText("Components/Pages/regions.json");
    //     List<MyRegion> regions = JsonConvert.DeserializeObject<List<MyRegion>>(json);



    //     return regions;
    // }

    // private List<MyState> FileOpenStates()
    // {
    //     var json = File.ReadAllText("Components/Pages/states.json");
    //     List<MyState> states = JsonConvert.DeserializeObject<List<MyState>>(json);

    //     return states;
    // }

    private void RegionClicked()
    {




    }
    private async void  HandleAlerts(MouseEventArgs e)
    {
        await this.GetZonesService.GetZones();
        
        NavigationManager.NavigateTo("");
    }

    private sealed class StateAbbreviationLinq
    {
        public string RegionName { get; set; }
        public string Abbrev { get; set; }
    }
}
