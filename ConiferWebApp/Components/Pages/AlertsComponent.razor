@page "/AlertsComponent"

@using ConiferWebApp.Services
@using ModelsProject;
@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.Components;
@using Microsoft.AspNetCore.Components.Web;
@using System.Text.Json
@using System.Text.RegularExpressions
@using Newtonsoft.Json

@rendermode InteractiveServer

@inject NavigationManager NavigationManager

@attribute [StreamRendering]

<h3>Select a state</h3>

<div>
    <h6>
        @this.ErrorMessage
    </h6>
</div>

@if (this.StateWithCities != null)
{
    <div class="row">
        <div class="col-md-4">
            <select class="form-control" onchange="@StateClicked">
                <option value="Select a state">
                    Select a state
                </option>
                @foreach (var state in this.StateWithCities)
                {

                    <option id="@state.State" value="@state.State">
                        @state.State @state.YesOrNo
                    </option>
                }
            </select>
        </div>

    </div>
}
<p></p>
@if (this.CitiesWithZones != null)
{
    <div class="row">
        <div class="col-md-4">
            @foreach (var zone in this.CitiesWithZones)
            {
                <p>
                    <button class="btn btn-primary" @onclick="() => SelectedZone(zone.Zone)">
                        @zone.City @zone.Zone
                    </button>
                </p>
            }

        </div>

    </div>
}

@if (this.RehydratedWeather != null)
{
    <EditForm Model="this.RehydratedWeather" FormName="RehydratedForm">
        <div class="form-floating mb-3">
            <InputText @bind-Value="this.RehydratedWeather.Event" id="myevent" class="form-control" 
                       aria-required="true" placeholder="Event" />
            <label for="myevent" class="form-label">Event</label>
        </div>

        <div class="form-floating mb-3">
            <InputText @bind-Value="this.RehydratedWeather.severity" id="myseverity" class="form-control" 
                       aria-required="true" placeholder="Severity" />
            <label for="myseverity" class="form-label">Severity</label>
        </div>

        <div class="form-floating mb-3">
            <InputText @bind-Value="this.RehydratedWeather.headline" id="myheadline" class="form-control" 
                       aria-required="true" placeholder="headline" />
            <label for="myheadline" class="form-label">Headline</label>
        </div>
        <div>
            <label>Description</label>
        </div>
        <div class="form-floating mb-3">
            <InputTextArea @bind-Value="this.RehydratedWeather.description" id="mydescription" class="form-control" 
                       aria-required="true"    />
        </div>
    </EditForm>

    
}

<div>
    <h6>
        @this.ErrorMessage
    </h6>
</div>

@code {
    private string ErrorMessage { get; set; } = "";

    [Inject]
    public IRegion? GetRegionsService { get; set; }

    [Inject]
    public IState? GetStatesService { get; set; }


    [Inject]
    public IZone? GetZonesService { get; set; }

    private List<MyRegion> Regions { get; set; } = new();

    private List<MyState> States { get; set; } = new();

    private List<MyZone> Zones { get; set; } = new();

    private List<MyZone> DisplayZones { get; set; } = new();

    private List<MyState> SelectedStates { get; set; } = new();

    private List<StateWithCity> StateWithCities { get; set; } = new();
    private List<CityAndZone> CitiesWithZones { get; set; } = new();
    private string? stateSelected { get; set; } = "";
    private PropertiesWeather? RehydratedWeather { get; set; } 
    // private List<

    [SupplyParameterFromQuery]
    private string? StatesPassed { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var gotstates = Regex.Split(this.StatesPassed, $",").ToList();
        gotstates.ForEach(fe => fe = fe.Trim());
        this.States = this.GetStatesService.GetStates().Result;
        this.Zones = this.GetZonesService.GetZonesAlreadyInjected().Result;

        foreach (var st in gotstates)
        {
            string foundcity = "Found City: ";
            StateWithCity stateWithCity = new StateWithCity();
            var statename = this.States.FirstOrDefault(w => w.Abbreviation.Trim() == st.Trim());
            if (statename != null)
            {
                // found
                stateWithCity.State = statename.Name;
                var foundCity = this.Zones.FirstOrDefault(fd => fd.StateAbbreviation.ToUpper() == statename.Abbreviation.ToUpper());
                if (foundCity != null)
                {
                    foundcity += "yes";
                }
                else
                {
                    foundcity += "no";
                }

                stateWithCity.YesOrNo = foundcity;
                this.StateWithCities.Add(stateWithCity);
            }
        }

    }

    private void StateClicked(ChangeEventArgs args)
    {
        this.stateSelected = args.Value.ToString();
        var foundZones = this.Zones.Where(w => w.State.Trim().ToUpper() == stateSelected.Trim().ToUpper())?.ToList();

        if (foundZones != null && foundZones.Count > 0)
        {
            var groupedByCity = foundZones.GroupBy(gb => gb.City).ToList();
            if (groupedByCity.Count > 0)
            {
                foreach (var city in groupedByCity)
                {
                    var gotcity = city.Key;
                    if (gotcity != null)
                    {
                        foreach (var zone in city)
                        {
                            CityAndZone cityAndZone = new CityAndZone();
                            cityAndZone.City = gotcity;
                            cityAndZone.Zone = zone.Zone;
                            this.CitiesWithZones.Add(cityAndZone);

                        }
                    }
                }
            }
        }
    }

    private async void SelectedZone(string args)
    {
        this.ErrorMessage = "";

        if (this.stateSelected != "Select a state")
        {
            // call API
            var client = new HttpClient();
            var request = new HttpRequestMessage
                {
                    Method = HttpMethod.Get,
                    RequestUri = new Uri($"https://api.weather.gov/alerts/active/zone/{args}"),
                    Headers =
    {
        
        { "User-Agent", "MarioThompsonmariothompson0010"}
    },
                };
            using (var response = await client.SendAsync(request))
            {
                try
                {
                    response.EnsureSuccessStatusCode();
                    var body = await response.Content.ReadAsStringAsync();
                    var rehydrated = JsonConvert.DeserializeObject<WeatherAPI>(body);
                    if (rehydrated != null && rehydrated.features != null && rehydrated.features.Length > 0)
                    {
                        this.RehydratedWeather = rehydrated.features[0].properties;
                    }
                    else
                    {
                        this.ErrorMessage = "No Alerts for this zone";
                        this.RehydratedWeather = null;
                    }

                    this.StateHasChanged();

                }
                catch (Exception)
                {
                    this.ErrorMessage = $"Could not retrieve data from API";

                }
            }

        }
    }

    private sealed class StateWithCity
    {
        public string State { get; set; }
        public string YesOrNo { get; set; } // does it have a city record?
    }

    private sealed class CityAndZone
    {
        public string City { get; set; }
        public string Zone { get; set; } // does it have a city record?

    }

    private class WeatherAPI
    {
        public string type { get; set; }
        public FeaturesWeather[] features { get; set; }
        public string title { get; set; }//: "Current watches, warnings, and advisories for West Side of Fresno and Kings Counties (CAZ305) CA",
        public string updated { get; set; }
    }

    private class FeaturesWeather
    {

        public string? id { get; set; }
        public string? type { get; set; }
        public string? geometry { get; set; }//: "Current watches, warnings, and advisories for West Side of Fresno and Kings Counties (CAZ305) CA",
        public PropertiesWeather? properties { get; set; }
    }

    private class PropertiesWeather
    {

        public string? severity { get; set; }
        public string? Event { get; set; }
        public string? headline { get; set; }//: "Current watches, warnings, and advisories for West Side of Fresno and Kings Counties (CAZ305) CA",
        public string? description { get; set; }
    }
}
